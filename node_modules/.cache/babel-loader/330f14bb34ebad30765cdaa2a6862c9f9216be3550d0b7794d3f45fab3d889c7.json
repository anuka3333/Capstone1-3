{"ast":null,"code":"import api from '../api';\n\n/**\n * Fetch clients from the backend.\n * If a token is provided it will be sent in the Authorization header.\n * Uses the configured API base if present, otherwise falls back to http://127.0.0.1:5000\n *\n * @param {{ token?: string }} options\n * @returns {Promise<any>} response data\n */\nexport async function fetchClients({\n  token\n} = {}) {\n  const headers = {};\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  // Prefer configured API base\n  try {\n    const base = (process.env.REACT_APP_API_URL || '').trim();\n    if (base) {\n      const res = await api.get('/clients', {\n        headers\n      });\n      return res.data;\n    }\n\n    // fallback to explicit URL\n    const res = await fetch('http://127.0.0.1:5000/clients', {\n      headers: {\n        ...headers\n      }\n    });\n    if (!res.ok) throw new Error(`Fetch failed: ${res.status} ${res.statusText}`);\n    return await res.json();\n  } catch (err) {\n    // bubble error with a helpful message\n    throw new Error(`fetchClients error: ${err.message}`);\n  }\n}\nexport default fetchClients;","map":{"version":3,"names":["api","fetchClients","token","headers","Authorization","base","process","env","REACT_APP_API_URL","trim","res","get","data","fetch","ok","Error","status","statusText","json","err","message"],"sources":["/Users/anukherlen/capstone1-3/src/utils/clients.js"],"sourcesContent":["import api from '../api';\n\n/**\n * Fetch clients from the backend.\n * If a token is provided it will be sent in the Authorization header.\n * Uses the configured API base if present, otherwise falls back to http://127.0.0.1:5000\n *\n * @param {{ token?: string }} options\n * @returns {Promise<any>} response data\n */\nexport async function fetchClients({ token } = {}) {\n  const headers = {};\n  if (token) headers.Authorization = `Bearer ${token}`;\n\n  // Prefer configured API base\n  try {\n    const base = (process.env.REACT_APP_API_URL || '').trim();\n    if (base) {\n      const res = await api.get('/clients', { headers });\n      return res.data;\n    }\n\n    // fallback to explicit URL\n    const res = await fetch('http://127.0.0.1:5000/clients', { headers: { ...headers } });\n    if (!res.ok) throw new Error(`Fetch failed: ${res.status} ${res.statusText}`);\n    return await res.json();\n  } catch (err) {\n    // bubble error with a helpful message\n    throw new Error(`fetchClients error: ${err.message}`);\n  }\n}\n\nexport default fetchClients;\n"],"mappings":"AAAA,OAAOA,GAAG,MAAM,QAAQ;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,YAAYA,CAAC;EAAEC;AAAM,CAAC,GAAG,CAAC,CAAC,EAAE;EACjD,MAAMC,OAAO,GAAG,CAAC,CAAC;EAClB,IAAID,KAAK,EAAEC,OAAO,CAACC,aAAa,GAAG,UAAUF,KAAK,EAAE;;EAEpD;EACA,IAAI;IACF,MAAMG,IAAI,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE,EAAEC,IAAI,CAAC,CAAC;IACzD,IAAIJ,IAAI,EAAE;MACR,MAAMK,GAAG,GAAG,MAAMV,GAAG,CAACW,GAAG,CAAC,UAAU,EAAE;QAAER;MAAQ,CAAC,CAAC;MAClD,OAAOO,GAAG,CAACE,IAAI;IACjB;;IAEA;IACA,MAAMF,GAAG,GAAG,MAAMG,KAAK,CAAC,+BAA+B,EAAE;MAAEV,OAAO,EAAE;QAAE,GAAGA;MAAQ;IAAE,CAAC,CAAC;IACrF,IAAI,CAACO,GAAG,CAACI,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,iBAAiBL,GAAG,CAACM,MAAM,IAAIN,GAAG,CAACO,UAAU,EAAE,CAAC;IAC7E,OAAO,MAAMP,GAAG,CAACQ,IAAI,CAAC,CAAC;EACzB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZ;IACA,MAAM,IAAIJ,KAAK,CAAC,uBAAuBI,GAAG,CAACC,OAAO,EAAE,CAAC;EACvD;AACF;AAEA,eAAenB,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}